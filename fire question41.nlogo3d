;_________________________ globals ________________
globals [
  shape-size ;; sphere's radius
  ;rounds-number
  ;goodP-number
  ;ordinaryP-number
  ;intermittentP-number
  ;badP-number
  ;Nc
  ;;rangeActivityLevel?
  ;H
  lambdaIT
  ;nBF
  ;nRL
  wI wR wW wC
  gammaI gammaR gammaW gammaC
  PL-PERFECT PL-GOOD PL-OK PL-BAD PL-WORST
  GOOD-DEV ORDINARY-DEV BAD-DEV
  DEGRADATION
  UGs-IT
  UGs-NoTrust
  UGs-ITWR
  UGs-ITCR
  UGs-ITWRCR
  provider-type
  trust-model

  component
  cptP
  pCPC
  pPPC
  pCLC
  pPLC
  M
  pMuC
  pProfileSwitch
  maxAngD
  ;; coefficient for the decrease of ug due to distance
  alpha

  ;; to plot decision between exploit and explore
  choiceExp
  choiceExp2

  moyyy
]

;_________________________ breeds properties ________________
breed [consummers consummer]
breed [providers provider]

turtles-own [
  x-pos
  y-pos
  z-pos
  radius ;; radius of operation
  neighbours ;;consummers neighbours
  is-liar
]

consummers-own [
  activity-level
	t-model ;; can be "IT" , "ITWR" or "NoTrust" for now
	has-trust-value ;;list
	no-trust-value ;; list
  T ;; temperature
  wr-evaluations
  ratings
  ;for CONSUMERS rates will be list like this [a,b,i,v] where a:consumer b:provider
  ; i:interactionNb and v is the value of the rate

]

providers-own[
  p-type
  performance-level
  received-ratings  ; same format with a in order for evaluation generic
]

;_________________________ setup ________________
to setup
  clear-all
  set moyyy []
  file-open "data 41"
  ;;setup all statics variables
  set shape-size 1000.0
  ;set shape-size 1.0
  set H 10
  set lambdaIT -5 / ln(0.5)

  set wI 2.0
  set wR 2.0
  set wW 1.0
  set wC 0.5
  set gammaI -1 * ln(0.5)
  set gammaR -1 * ln(0.5)
  set gammaW -1 * ln(0.5)
  set gammaC -1 * ln(0.5)
  set PL-PERFECT 10
  set PL-GOOD 5
  set PL-OK 0
  set PL-BAD -5
  set PL-WORST -10
  set GOOD-DEV 1
  set ORDINARY-DEV 2
  set BAD-DEV 2
  set DEGRADATION 1
  set UGs-IT []
  set UGs-ITWR []
  set UGs-ITCR []
  set UGs-ITWRCR []
  set UGs-NoTrust []
  set provider-type ["good" "bad" "intermittent" "ordinary"]
  set trust-model ["NoTrust" "IT" "ITWR" "ITWRCR" "ITCR"]
  set component ["IT" "WR" "CR"]
  set pCPC 0.05
  set pPPC 0.02
  set pCLC 0.1
  set pPLC 0.1
  set M 1
  set pMuC 0.1
  set pProfileSwitch 0.02
  set maxAngD pi / 20
  set cptP 0
  ;;Setting the maximum distance that can separate a provider nd a consumer
  ;;(for decreasing UG when out of range)
  let maxD shape-size * pi
  set maxD maxD * 100
  ;; 4 paramètre déterminé arbitrairement (il determine l'impact de la distance sur l'ug
  ; plus il est grand moins l'ug sera modifiée et vice versa)
  set alpha 1 / maxD

  if no-trust [add-consumer Nc "NoTrust"]
  if it-only [add-consumer Nc "IT"]
  if it-wr [add-consumer Nc "ITWR"]
  if it-wr-cr [add-consumer Nc "ITWRCR"]
  if it-cr [add-consumer Nc "ITCR"]

  add-provider goodP-number "good"
  add-provider ordinaryP-number "ordinary"
  add-provider badP-number "bad"
  add-provider intermittentP-number "intermittent"

  if count consummers = 0 [
    show "There must be consumers"
    stop]

  ask turtles [
    set-neighbours

  ]
  ;;Set some liars
  if (liars) [
    let ttl count consummers
    let n ((liars-percentage * ttl) / 100)
    let i 0
    let liars-list n-of n consummers
    ask liars-list [
      set i i + 1
      set is-liar true
    ]
  ]


  reset-ticks
end



to add-consumer [number tmodel]
  create-consummers number
  [
    set x-pos vary (-1.0 * sqrt(shape-size)) sqrt(shape-size)  ; however, random distribution on the surface of the sphere
    set y-pos vary (-1.0 * sqrt(shape-size - (x-pos * x-pos))) sqrt(shape-size - (x-pos * x-pos))
    ifelse (random 2) = 0
      [set z-pos -1.0 * sqrt(shape-size - (x-pos * x-pos) - (y-pos * y-pos))]
      [set z-pos sqrt(shape-size - (x-pos * x-pos) - (y-pos * y-pos))]
    setxyz x-pos y-pos z-pos

    set radius shape-size * vary 0.5 1
    set color violet

    set activity-level vary 0.25 1.00
    set ratings []
    set t-model tmodel
    set has-trust-value []
    set no-trust-value []
    set T initialTemperature
    set is-liar false


    if t-model = "ITWR" or t-model = "ITWRCR" [set wr-evaluations []]

  ]
end

to add-provider [number ptype]
  create-providers number
  [
    set x-pos vary (-1.0 * sqrt(shape-size)) sqrt(shape-size)  ; however, random distribution on the surface of the sphere
    set y-pos vary (-1.0 * sqrt(shape-size - (x-pos * x-pos))) sqrt(shape-size - (x-pos * x-pos))
    ifelse (random 2) = 0
      [set z-pos -1.0 * sqrt(shape-size - (x-pos * x-pos) - (y-pos * y-pos))]
      [set z-pos sqrt(shape-size - (x-pos * x-pos) - (y-pos * y-pos))]
    setxyz x-pos y-pos z-pos

    set radius shape-size * vary 0.1 0.4

    set received-ratings []

    setup-provider-type ptype
    set is-liar false
  ]
end

to setup-provider-type [ptype]
  set p-type ptype
  set color green
  let ppt get-type-properties ptype
  set performance-level vary item 0 ppt item 1 ppt
  if p-type = "bad" [ set color red ]
  if p-type = "ordinary" [ set color yellow ]
  if p-type = "intermittent" [
    set color brown
    set performance-level (item 0 ppt + item 1 ppt) / 2
  ]

end

to set-default-parameters
  set goodP-number 10
  set ordinaryP-number 40
  set intermittentP-number 5
  set badP-number 45
  set Nc 500
  set rounds-number 500
  set nBF 2
  set nRL 5
  ;set wW 1
  ;set wC 0.5
end

to set-small-world
  set shape-size shape-size / 5
  set goodP-number goodP-number / 5
  set ordinaryP-number ordinaryP-number / 5
  set intermittentP-number intermittentP-number / 5
  set badP-number badP-number / 5
  set Nc Nc / 5
  set rounds-number 200
  set nBF 1
  set nRL 2
end

;_________________________ enum provider type ________________
to-report get-type-properties [ptype]

  if ptype = "good" [
    report (list PL-PERFECT PL-GOOD GOOD-DEV) ]
  if ptype = "ordinary" [
    report (list PL-OK PL-GOOD ORDINARY-DEV) ]
  if ptype = "intermittent" [
    report (list PL-BAD PL-GOOD 0) ]
  if ptype = "bad" [
    report (list PL-WORST PL-OK BAD-DEV) ]
end

to-report get-component-coef [k]
  if k = "IT" [report wI]
  if k = "WR" [report wW]
  if k = "CR" [report wC]
end



;_________________________ calculation methods ________________
to-report vary [ #min #max ]  ; random float in given range
  report #min + random-float (#max - #min)
end

to-report great-distance [x1 y1 z1 x2 y2 z2]

  ;let dotproduct (x1 * x2 + y1 * y2 + z1 * z2)/(shape-size ^ 2) ; normalized
  ;report acos(dotproduct) * shape-size

  ;; Jehyankaa
;  let latlong get-lat-long x1 y1 z1
;  let latlong2 get-lat-long x2 y2 z2
;  let lat1 item 0 latlong
;  let lat2 item 0 latlong2
;  let lon1 item 1 latlong
;  let lon2 item 1 latlong2
;
;  let D  (sin ( (lat2 - lat1) / 2) ) ^ 2 + ( cos lat1 * cos lat2 * (sin ((lon2 - lon1) / 2) ) ^ 2 )
;  set D 2 * shape-size * asin (sqrt D)
  let d2 ((x1 - x2) ^ 2 + (y1 - y2) ^ 2 + (z1 - z2) ^ 2)
  let res shape-size * asin ( ((sqrt d2) * sqrt (4 * (shape-size ^ 2) - d2)) / (2 * (shape-size) ^ 2))
  if res > (pi * shape-size) [
    set res pi * shape-size]

  report res

  ;report abs D
end

;Will report the difference (in UG units)
;between a performance (ug) given by the provider (p) to another consumer (witness) and
;the performance the agent expects to receive
to-report ug-difference [ug witness p]
  let p-x-pos 0
  let p-y-pos 0
  let p-z-pos 0

  let c-x-pos 0
  let c-y-pos 0
  let c-z-pos 0

  ;; get provider position
  ask provider p [
    set p-x-pos x-pos
    set p-y-pos y-pos
    set p-z-pos z-pos
  ]
  ;; get witness position
  ask consummer witness [
    set c-x-pos x-pos
    set c-y-pos y-pos
    set c-z-pos z-pos
  ]
  ;distance between witness & provider
  let d1 great-distance c-x-pos c-y-pos c-z-pos p-x-pos p-y-pos p-z-pos

  ;distance between me & provider
  let d2 great-distance x-pos y-pos z-pos p-x-pos p-y-pos p-z-pos


  report (d2 - d1) * alpha
end

;d is the difference between d and ro
to-report ug-out-of-range [ug d]

  let new-ug (ug - (abs ug * d * alpha) )
  ;let new-ug (ug - d * alpha)
  if new-ug < -10 [set new-ug -10]

  report new-ug
end

to-report to-polar [x y z]
  let r sqrt (x ^ 2 + y ^ 2 + z ^ 2)
  let theta acos (z / r)
  let phi atan y  x
  report (list r theta phi)
end

to-report to-cartesian [r theta phi]
  let x (r * sin (theta) * cos (phi))
  let y (r * sin (theta) * sin (phi))
  let z (r * cos (theta))
  report (list x y z)
end

to-report get-lat-long [x y z]
  let lat asin (z / shape-size)
  let lon atan y x
  report (list lat lon)
end

;_________________________ set rating & trust value ________________

;;There is a difference between getting his own rates (direct interaction) and others (witnesses)
to-report get-rates [k b]
  let r-ab []
  if k = "IT"[
    set r-ab get-ratings-for b
  ]

  if k = "WR" [
    foreach wr-evaluations [
      wr-ev ->
      if item 0 wr-ev = b [
        set r-ab item 1 wr-ev
        report r-ab
      ]
    ]

  ]

  if k = "CR" [

    ask provider b [set r-ab received-ratings]
  ]
  report r-ab
end

to-report get-false-rate [r]
  let epsilon vary -0.75 0.75
  let new-value (item 3 r + epsilon)
  if new-value > 1 [set new-value 1]
  if new-value < -1 [set new-value -1]
  let new-rate (list item 0 r item 1 r item 2 r new-value)
  report new-rate
end

;;This function is to retrieve the best rating for b to give it to the provider b (certified reputation)
to-report get-best-rating-for [b]
  let rates sort-with [ l -> item 3 l ] get-ratings-for b
  let br item 0 rates
  ;; We change the rate before sending it to the provider if the consumer is a liar
  if is-liar [
    set br get-false-rate br
  ]
  report br
end

to-report has-ratings? [x]
  report ((length get-ratings-for x) > 0)
end

to-report get-ratings-for [b]
  let res []
  foreach ratings [
    r ->
    if item 1 r = b [
      set res lput r res]
  ]
  report res
end


;;;General t-value (with all components)
to-report get-t-value [b]
  let components []

  if t-model = "IT" [set components (list "IT")]
  if t-model = "ITWR" [set components (list "IT" "WR")]
  if t-model = "ITCR" [set components (list "IT" "CR")]
  if t-model = "ITWRCR" [set components (list "IT" "WR" "CR")]

  let t-value 0
  let weight-sum 0
  let r-ab []

  foreach components [
    k ->
    set r-ab get-rates k b

    if length r-ab > 0 [
      let tk get-t-value-by-component k r-ab
      let reliability get-reliability k b tk
      let w ( (get-component-coef k) * reliability )
      set t-value (t-value + w * tk)
      set weight-sum weight-sum + w
    ]

  ]

  if (weight-sum = 0) [set weight-sum 1]

  set t-value (t-value / weight-sum)
  report t-value
end


;;T-value for the component k from the list r-ab
;;will return a list of 2 elements : first is trust value and second is reliability
to-report get-t-value-by-component [k r-ab]

  let t-value 0
  let weight-sum 0

  foreach r-ab [
    r ->
    ;Rating between -1 et 1
    let v item 3 r
    ;Associated ug (x 10)
    let ug v * 10
    ;Get the real expectation (considering distance)
    set ug ug + ug-difference ug item 0 r item 1 r
    ;Back to rating value range
    if k = "WR" or k = "CR" [set v ug / 10]

    let weight get-weight k r
		set weight-sum (weight-sum + weight)
		set t-value t-value + (weight * v)

  ]

  set t-value (t-value / weight-sum)
  report t-value

end

to-report get-reliability [k b t-value]
  let gamma gammaI
  let r-ab get-rates k b
	if k = "WR"[
    set gamma gammaW
  ]
	if k = "CR"[
    set gamma gammaC
  ]

  let weight-sum 0
  let p-d 0
  foreach r-ab [
    r ->
    ;Rating between -1 et 1
    let v item 3 r
    ;Associated ug (x 10)
    let ug v * 10
    ;Get the real expectation (considering distance)
    set ug ug + ug-difference ug item 0 r item 1 r
    ;Back to rating value range
    if k = "WR" or k = "CR" [set v ug / 10]

    let weight get-weight k r
		set weight-sum (weight-sum + weight)
    set p-d p-d + weight * abs (v - t-value)
  ]

	set p-d 1 - (p-d / (2 * weight-sum))
	let pr 1 - (exp (-1 * gamma * weight-sum))

  report pr * p-d
end

to-report get-weight [k r]
  report exp(-1 * (ticks - item 2 r)) / lambdaIT
end

;; sort decreasingly a list of lists (by item of sublist)
to-report sort-with [ key lst ]
  report sort-by [ [a b] -> (runresult key a) > (runresult key b) ] lst
end


to delete-old-ratings
  set ratings sort-with [ l -> item 2 l ] ratings
  set ratings sublist ratings 0 H
end


;;WR evaluation process for provider b
to-report wr-evaluation [b]
	let chain 0
	let witnessNb 0
	let ratingslist []
  let seen-consumers []

  ;Initialization with his nearest neighbours
	let acquaintances get-acquaintances-neighbours b seen-consumers
  let new-acquaintances []

  set seen-consumers lput who seen-consumers

  while [(witnessNb < nBF) and (chain < nRL)] [

    set chain chain + 1

    ;; add acquaintances for next level of exploration
    foreach new-acquaintances[
      x ->
      ;avoid doublons
      if (not member? x acquaintances) [set acquaintances lput x acquaintances]
    ]

    foreach acquaintances [
      a ->
      set acquaintances remove a acquaintances
      ask consummer a [
        ifelse has-ratings? b
        [
          let found-ratings (get-rates "IT" b)
          foreach found-ratings [
            f ->
            ;if the consumer is a liar, he will pass on false ratings
            ifelse is-liar [set ratingslist lput get-false-rate f ratingslist]
            [set ratingslist lput f ratingslist]
          ]
          ;If he had an interaction he is a witness
          set witnessNb witnessNb + 1
        ]
        [
          ;Everyone puts the neighbours he have in new acquaintanes
          let my-neighbours (get-acquaintances-neighbours b seen-consumers)

          foreach my-neighbours[
            n ->
            if (not member? n new-acquaintances) [set new-acquaintances lput n new-acquaintances]
          ]
        ]
      ]
      set seen-consumers lput a seen-consumers
    ]

  ]


	report ratingslist

end


;_________________________ agents selection________________

;set consumer neighbours of an agent (based on his 'operating' radius)
to set-neighbours
  let c-neighbours []
  let x x-pos
  let y y-pos
  let z z-pos
  let r radius
  let myId who

  ask consummers [
    let d great-distance x y z x-pos y-pos z-pos
    ;do not add self to the list

    if ((not (who = myId)) and (d <= r))
    [set c-neighbours lput who c-neighbours ]
  ]

  set neighbours c-neighbours
end


; get a random provider (wherever he is, whatever his type is)
to-report select-random-provider
  let id 0
  ifelse no-trust-value = [] [
    ask one-of providers [set id who ]
  ]
  [
    set id one-of no-trust-value
  ]
  report id
end

;; among neighbours, we get the nearest to the provider b whose trust value is searched
to-report get-acquaintances-neighbours [b seen-consumers]
  ;let neighbours get-neighbours
  let neighbours-details []
  let provider-position []

  ask provider b
  [set provider-position (list x-pos y-pos z-pos)]

  let distance-temp 0
  foreach neighbours [
    n ->
    ask consummer n [set distance-temp great-distance x-pos y-pos z-pos item 0 provider-position item 1 provider-position item 2 provider-position]
    set neighbours-details lput (list n distance-temp) neighbours-details
  ]

  set neighbours-details reverse (sort-with [ l -> item 1 l ] neighbours-details)

  let res []
  let agenttmp 0
  foreach neighbours-details
  [n ->
    set agenttmp item 0 n
    if (not member? agenttmp seen-consumers) [
      set res lput agenttmp res
    ]
  ]

  if (length res > nBF) [ set res sublist res 0 nBF ]


  report res
end


to-report select-best-provider
  let best-value -20
  let best-p 0
  foreach has-trust-value
  [
    x ->

    ;if IT only no need to combine composants
    let t-value 0

    ifelse t-model = "IT" [

      let r-ab get-rates "IT" x
      set t-value get-t-value-by-component t-model r-ab
    ]
    ;; If the t-model is not "IT" it can only be ITWR or ITWRCR or ITCR (cause NoTrust consumers won't select best provider)
    [

      set t-value get-t-value x]

    if t-value > best-value
    [
      set best-value t-value
      set best-p x
    ]
  ]
  report best-p
end

to-report select-provider
  ifelse t-model = "NoTrust" [
    report select-random-provider
  ]

  [
    let c-x-pos x-pos
    let c-y-pos y-pos
    let c-z-pos z-pos
    let myro radius
    let providersIds []

    ask providers [
      ;If provider is nearby (in ro) we add to the list
      if (great-distance x-pos y-pos z-pos c-x-pos c-y-pos c-z-pos <= myro)
      [set providersIds lput who providersIds]
    ]

    ;Back to empty list (because some ratings have been deleted + dynamism)
    set has-trust-value []
    set no-trust-value []
    let r-ab-i []
    let r-ab-c []
    let r-ab-w []

    if (t-model = "ITWR" or t-model = "ITWRCR") [
      set wr-evaluations []]

    foreach providersIds [
      x ->

      set r-ab-i get-rates "IT" x
      if (t-model = "ITWR" or t-model = "ITWRCR") [
        set r-ab-w wr-evaluation x]

      if (t-model = "ITCR" or t-model = "ITWRCR") [
        ask provider x [set r-ab-c received-ratings]
      ]

      ifelse (length r-ab-i > 0) or (length r-ab-w > 0) or (length r-ab-c > 0) [
        set has-trust-value lput x has-trust-value
        if (length r-ab-w > 0) [
          set wr-evaluations lput (list x r-ab-w) wr-evaluations
        ]
      ]
      [
        set no-trust-value lput x no-trust-value
      ]

    ]

    if length has-trust-value = 0 [report select-random-provider]
    if length no-trust-value = 0 [report select-best-provider]

    let best-p select-best-provider

    let t-value 0
    ;if IT only no need to combine composants

    let r-ab get-rates "IT" best-p
    ifelse t-model = "IT" [set t-value get-t-value-by-component t-model r-ab]
    [set t-value get-t-value best-p]

    ;;er-exploit gets best trust value ([-1;1]
    let er-exploit t-value

    ;; to ug scale - [-10;10]
    set er-exploit er-exploit * 10


    let average-ugs []
    let known-providers sentence has-trust-value no-trust-value

    let my-x x-pos
    let my-y y-pos
    let my-z z-pos
    let distances []
    let diff 0
    foreach known-providers [
      p ->
      ask provider p [
        let d great-distance x-pos y-pos z-pos my-x my-y my-z
        ifelse (d - radius <= 0) [set diff 0] [set diff (d - radius)]
        set distances lput diff distances
        let ppt get-type-properties p-type
        set average-ugs lput (mean sublist ppt 0 2) average-ugs
      ]
    ]
    let average-distance mean distances
    let average-ug mean average-ugs

    let er-explore average-ug
    ; we consider the distance of the agent for estimated result
    ; this consideration will be in get-t-value also
    set er-explore ug-out-of-range er-explore mean distances

    let temp-coef (999 / 1000)
    ;let temp-coef (( 10 * rounds-number - 1) / (10 * rounds-number))
    set T T - 1
    ;set T T * temp-coef
    ;set T initialTemperature * (temp-coef ^ (ticks))
    ;set T T - (1 / (rounds-number * 10))
    ;set T initialTemperature - (ticks * 0.00015)

    if T <= 0 [
      set T 1]


    let a1 exp (er-exploit / T)
    let b1 exp (er-explore / T)


    set b1 (a1 + b1)
    let p-exploit (a1 / b1)

    let r random-float 1.0

    ifelse r < p-exploit
    [report best-p]
    [report select-random-provider]
  ]

end

;_________________________ dynamic environment ________________

;random amount of agent entering and quiting the world
to random-setup

  ;; on suppose qu'on garde les même proportions pour les consumers (notrust vs fire)
  ;; et les providers (autant de good, bad etc)
  ;; a vérifier (on est peut être pas obligé)
  let n random (pCPC * count consummers)


  let i 0
  let c one-of consummers
  let p one-of providers
  let tmodel ""
  while [i < n]
  [
    ask c [
      set tmodel t-model
      die
    ]


    set c one-of consummers
    add-consumer 1 tmodel
    set i i + 1

  ]
  if (i > 0) [ask consummers [set-neighbours]]

  set i 0
  set n random (pPPC * count providers)
  let ptype ""

  while [i < n]
  [
    ask p [
      set ptype p-type
      die
    ]

    set p one-of providers
    add-provider 1 ptype
    set i i + 1

  ]
  ; pas besoin de voisins pour un provider
  ;if (i > 0) [ask providers [set-neighbours]]
end

to random-move

  let rand random-float 1

  if ((rand < pPLC) and (breed = "provider")) or ((rand < pCLC) and (breed = "consumer"))
  [
    ;; Takes randomly the variation
    let delta-phi vary (-1 * maxAngD) maxAngD
    let delta-theta vary (-1 * maxAngD) maxAngD

    ;; conversion from cartesian to polar
    let polars to-polar x-pos y-pos z-pos
    let r item 0 polars
    let theta item 1 polars
    let phi item 2 polars
    ;; adding variations
    set theta (theta + delta-theta)
    set phi (phi + delta-phi)
    ;; get new cartesian coordinates
    let new-coordinates to-cartesian r theta phi
    ;; move
    set x-pos (item 0 new-coordinates)
    set y-pos (item 1 new-coordinates)
    set z-pos (item 2 new-coordinates)
    setxyz x-pos y-pos z-pos

    set-neighbours
  ]
end

to switch-behaviour
  let r random-float 1
  ifelse r < pProfileSwitch [
    ;;A VERIFIER
    let new-type one-of provider-type
    setup-provider-type new-type
  ]
  [
    if r < pMuC [
      let deltaMu vary (-1 * M) M
      set performance-level performance-level + deltaMu
    ]
  ]
end


;_________________________ interaction ________________

to interact-with [b]
  let ug 0
  let x1 x-pos
  let y1 y-pos
  let z1 z-pos

  let provider-id 0


  ask b [
    set provider-id who
    ;; We set the ug by defining the type of provider
    ifelse p-type = "intermittent"
    [set ug vary PL-BAD PL-GOOD]
    [
      let ppt get-type-properties p-type
      set ug random-normal performance-level item 2 ppt
      if (ug < -10) [set ug -10]
      if (ug > 10) [set ug 10]
    ]

    let d great-distance x-pos y-pos z-pos x1 y1 z1

    if d > radius [
      ;; if outside of the provider’s normal operational, uG degraded linearly
      set ug ug-out-of-range ug (d - radius)
    ]



  ]
  ;add utilities to global lists
  if t-model = "ITCR" [ set UGs-ITCR lput ug UGs-ITCR ]
  if t-model = "ITWRCR" [ set UGs-ITWRCR lput ug UGs-ITWRCR ]
  if t-model = "ITWR" [ set UGs-ITWR lput ug UGs-ITWR ]
  if t-model = "IT" [ set UGs-IT lput ug UGs-IT ]
  if t-model = "NoTrust" [ set UGs-NoTrust lput ug UGs-NoTrust ]

  ;The rating value is in [-1;1] and the performance in [-10;10]
  let r-value ug / 10

  ;store
  set ratings lput (list who provider-id ticks r-value) ratings
  let a who


  let brb get-best-rating-for provider-id
  ;provider stores only if it's a good rate (>0)
  ;if r-value > 0 [
  ask b [set received-ratings lput brb received-ratings ]
  ;]

end



;_________________________ main loop ________________
to go
  ;if Nc > 500 [stop]
  if ticks > rounds-number [stop]
  if (empty-lists) [
    set UGs-IT []
    set UGs-ITCR []
    set UGs-ITWR []
    set UGs-ITWRCR []
    set UGs-NoTrust []
  ]

  ask consummers [

    if random-float 1.0 < activity-level [

      let prov select-provider
      interact-with provider prov
    ]

    if dynamism-moves [random-move]

    if length ratings > H [delete-old-ratings]
  ]

  ask providers [
    ;; We save only one rating per consumer (the best)
    ;foreach received-ratings [

    ;]

    ;we don't store too much ratings in local database ( > H )
    if length received-ratings > H [
      set received-ratings sort-with [ l -> item 2 l ] received-ratings
      set received-ratings sublist received-ratings 0 H
    ]
  ]


  if dynamism-behaviours [ask providers [switch-behaviour]]

  if dynamism-setup [random-setup]
  if ticks = 0 [file-write "[ "]
  file-write mean UGs-ITWRCR
  file-write ", "
  if ticks >= rounds-number [
    file-show "], "
    file-close
    ]

  tick

end
@#$#@#$#@
GRAPHICS-WINDOW
0
0
1321
1322
-1
-1
13.0
1
10
1
1
1
0
1
1
1
-50
50
-50
50
-50
50
1
1
1
ticks
30.0

BUTTON
506
15
579
48
NIL
setup\n
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
507
56
570
89
NIL
go\n
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
0

TEXTBOX
29
480
179
536
réglable : degradation, poids des components
11
71.0
1

PLOT
400
115
823
425
Comparison UG
Interaction
UG
0.0
100.0
-2.0
5.0
true
true
"" ""
PENS
"noTrust" 1.0 0 -2674135 true "" "plot mean UGs-NoTrust "
"CONTROL (FIRE-IT)" 1.0 0 -14454117 true "" "plot mean UGs-IT"
"IT-WR" 1.0 0 -13840069 true "" "plot mean UGs-ITWR"
"IT-CR" 1.0 0 -4757638 true "" "plot mean UGs-ITCR"
"UGs-ITWRCR" 1.0 0 -955883 true "" "plot mean UGs-ITWRCR"
"2" 1.0 0 -4539718 true "" "plot 2"
"0" 1.0 0 -16777216 true "" "plot 0"

SLIDER
222
15
394
48
rounds-number
rounds-number
0
500
200.0
1
1
NIL
HORIZONTAL

SLIDER
30
232
202
265
H
H
0
50
10.0
1
1
NIL
HORIZONTAL

SLIDER
29
181
201
214
Nc
Nc
0
1000
250.0
1
1
NIL
HORIZONTAL

SLIDER
28
92
200
125
goodP-number
goodP-number
0
100
10.0
1
1
NIL
HORIZONTAL

SLIDER
26
16
198
49
ordinaryP-number
ordinaryP-number
0
100
40.0
1
1
NIL
HORIZONTAL

SLIDER
28
129
202
162
intermittentP-number
intermittentP-number
0
100
5.0
1
1
NIL
HORIZONTAL

SLIDER
27
54
199
87
badP-number
badP-number
0
100
45.0
1
1
NIL
HORIZONTAL

INPUTBOX
222
57
282
117
initialTemperature
500.0
1
0
Number

SWITCH
28
280
186
313
dynamism-behaviours
dynamism-behaviours
1
1
-1000

SWITCH
28
319
186
352
dynamism-moves
dynamism-moves
1
1
-1000

SWITCH
28
360
186
393
dynamism-setup
dynamism-setup
1
1
-1000

MONITOR
607
13
697
58
CONSUMERS
count consummers
17
1
11

BUTTON
403
14
491
47
DEFAULT
set-default-parameters
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SWITCH
287
57
391
90
no-trust
no-trust
1
1
-1000

SWITCH
288
96
391
129
it-only
it-only
1
1
-1000

SWITCH
289
135
392
168
it-wr
it-wr
1
1
-1000

INPUTBOX
28
406
87
466
nBF
2.0
1
0
Number

INPUTBOX
113
406
172
466
nRL
5.0
1
0
Number

MONITOR
608
63
665
108
NIL
ticks
17
1
11

BUTTON
403
52
493
85
Settings /5
set-small-world
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SWITCH
289
174
392
207
it-wr-cr
it-wr-cr
0
1
-1000

SWITCH
288
213
391
246
it-cr
it-cr
1
1
-1000

SWITCH
210
407
337
440
empty-lists
empty-lists
1
1
-1000

SLIDER
215
320
347
353
liars-percentage
liars-percentage
0
100
28.0
1
1
NIL
HORIZONTAL

SWITCH
216
281
319
314
liars
liars
1
1
-1000

@#$#@#$#@
## WHAT IS IT?

(a general understanding of what the model is trying to show or explain)

## HOW IT WORKS

(what rules the agents use to create the overall behavior of the model)

## HOW TO USE IT

(how to use the model, including a description of each of the items in the Interface tab)

## THINGS TO NOTICE

(suggested things for the user to notice while running the model)

## THINGS TO TRY

(suggested things for the user to try to do (move sliders, switches, etc.) with the model)

## EXTENDING THE MODEL

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

## NETLOGO FEATURES

(interesting or unusual features of NetLogo that the model uses, particularly in the Code tab; or where workarounds were needed for missing features)

## RELATED MODELS

(models in the NetLogo Models Library and elsewhere which are of related interest)

## CREDITS AND REFERENCES

(a reference to the model's URL on the web if it has one, as well as any other necessary credits, citations, and links)
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 3D 6.0.4
@#$#@#$#@
need-to-manually-make-preview-for-this-model
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
